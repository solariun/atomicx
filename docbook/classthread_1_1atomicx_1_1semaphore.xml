<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classthread_1_1atomicx_1_1semaphore" xml:lang="en-US">
<title>thread::atomicx::semaphore Class Reference</title>
<indexterm><primary>thread::atomicx::semaphore</primary></indexterm>
<para>
<computeroutput>#include &lt;atomicx.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classthread_1_1atomicx_1_1semaphore_1a79d76e6e1ee01a6677883905e7087e09">semaphore</link> (size_t nMaxShared)</para>

<para>Construct a new semaphore with MaxShared allowed. </para>
</listitem>
            <listitem><para>bool <link linkend="_classthread_1_1atomicx_1_1semaphore_1a3878e64275d2b5ff7e2ac048c8ef3f71">acquire</link> (<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link> nTimeout=0)</para>

<para>Acquire a shared lock context, if already on max shared allowed, wait till one is release or timeout. </para>
</listitem>
            <listitem><para>void <link linkend="_classthread_1_1atomicx_1_1semaphore_1a1709f7143fe5b61c059b5863b96a97f1">release</link> ()</para>

<para>Releases one shared lock. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classthread_1_1atomicx_1_1semaphore_1ad75031cc128b92ac9c88c53506ac6d43">GetCount</link> ()</para>

<para>Get How many shared locks at a given moment. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classthread_1_1atomicx_1_1semaphore_1a62bc2b7526553d6b2ad72da530adf4cb">GetWaitCount</link> ()</para>

<para>Get how many waiting threads for accquiring context. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classthread_1_1atomicx_1_1semaphore_1a00091856b2f9a2c0fe74c6f906889a33">GetMaxAcquired</link> ()</para>

<para>Get the Max Acquired Number. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static size_t <link linkend="_classthread_1_1atomicx_1_1semaphore_1ade0023e9bf71f3ea941281355e0a0559">GetMax</link> ()</para>

<para>Get the maximun accquired context possible. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
 </para>
<section xml:id="_classthread_1_1atomicx_1_1semaphore_1autotoc_md9">
<title>SEMAPHORES IMPLEMENTATION</title>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classthread_1_1atomicx_1_1semaphore_1a79d76e6e1ee01a6677883905e7087e09"/><section>
    <title>semaphore()</title>
<indexterm><primary>semaphore</primary><secondary>thread::atomicx::semaphore</secondary></indexterm>
<indexterm><primary>thread::atomicx::semaphore</primary><secondary>semaphore</secondary></indexterm>
<para><computeroutput>thread::atomicx::semaphore::semaphore (size_t nMaxShared)</computeroutput></para><para>

<para>Construct a new semaphore with MaxShared allowed. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>nMaxShred</entry><entry>
<para>Max shared lock </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classthread_1_1atomicx_1_1semaphore_1a3878e64275d2b5ff7e2ac048c8ef3f71"/><section>
    <title>acquire()</title>
<indexterm><primary>acquire</primary><secondary>thread::atomicx::semaphore</secondary></indexterm>
<indexterm><primary>thread::atomicx::semaphore</primary><secondary>acquire</secondary></indexterm>
<para><computeroutput>bool thread::atomicx::semaphore::acquire (<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link> nTimeout = <computeroutput>0</computeroutput>
)</computeroutput></para><para>

<para>Acquire a shared lock context, if already on max shared allowed, wait till one is release or timeout. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>nTimeout</entry><entry>
<para>default = 0 (indefinitely), How long to wait of accquiring</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if it acquired the context, otherwise timeout returns false </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1semaphore_1ad75031cc128b92ac9c88c53506ac6d43"/><section>
    <title>GetCount()</title>
<indexterm><primary>GetCount</primary><secondary>thread::atomicx::semaphore</secondary></indexterm>
<indexterm><primary>thread::atomicx::semaphore</primary><secondary>GetCount</secondary></indexterm>
<para><computeroutput>size_t thread::atomicx::semaphore::GetCount ( )</computeroutput></para><para>

<para>Get How many shared locks at a given moment. </para>
</para>

<para><formalpara><title>Returns</title>

<para>size_t Number of shared locks </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1semaphore_1ade0023e9bf71f3ea941281355e0a0559"/><section>
    <title>GetMax()</title>
<indexterm><primary>GetMax</primary><secondary>thread::atomicx::semaphore</secondary></indexterm>
<indexterm><primary>thread::atomicx::semaphore</primary><secondary>GetMax</secondary></indexterm>
<para><computeroutput>size_t thread::atomicx::semaphore::GetMax ( )<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Get the maximun accquired context possible. </para>
</para>

<para><formalpara><title>Returns</title>

<para>size_t </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1semaphore_1a00091856b2f9a2c0fe74c6f906889a33"/><section>
    <title>GetMaxAcquired()</title>
<indexterm><primary>GetMaxAcquired</primary><secondary>thread::atomicx::semaphore</secondary></indexterm>
<indexterm><primary>thread::atomicx::semaphore</primary><secondary>GetMaxAcquired</secondary></indexterm>
<para><computeroutput>size_t thread::atomicx::semaphore::GetMaxAcquired ( )</computeroutput></para><para>

<para>Get the Max Acquired Number. </para>
</para>

<para><formalpara><title>Returns</title>

<para>size_t The max acquired context number </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1semaphore_1a62bc2b7526553d6b2ad72da530adf4cb"/><section>
    <title>GetWaitCount()</title>
<indexterm><primary>GetWaitCount</primary><secondary>thread::atomicx::semaphore</secondary></indexterm>
<indexterm><primary>thread::atomicx::semaphore</primary><secondary>GetWaitCount</secondary></indexterm>
<para><computeroutput>size_t thread::atomicx::semaphore::GetWaitCount ( )</computeroutput></para><para>

<para>Get how many waiting threads for accquiring context. </para>
</para>

<para><formalpara><title>Returns</title>

<para>size_t Number of waiting threads </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1semaphore_1a1709f7143fe5b61c059b5863b96a97f1"/><section>
    <title>release()</title>
<indexterm><primary>release</primary><secondary>thread::atomicx::semaphore</secondary></indexterm>
<indexterm><primary>thread::atomicx::semaphore</primary><secondary>release</secondary></indexterm>
<para><computeroutput>void thread::atomicx::semaphore::release ( )</computeroutput></para><para>

<para>Releases one shared lock. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
atomicx/<link linkend="_atomicx_8hpp">atomicx.hpp</link>atomicx/<link linkend="_atomicx_8cpp">atomicx.cpp</link></section>
</section>
