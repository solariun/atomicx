<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classthread_1_1atomicx_1_1smart_mutex" xml:lang="en-US">
<title>thread::atomicx::smartMutex Class Reference</title>
<indexterm><primary>thread::atomicx::smartMutex</primary></indexterm>
<para>

<para>RII compliance lock/shared lock to auto unlock on destruction. </para>
 
</para>
<para>
<computeroutput>#include &lt;atomicx.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classthread_1_1atomicx_1_1smart_mutex_1a9d85d1b131df0b9c0828b24c80dee4ca">smartMutex</link> ()=delete</para>
</listitem>
            <listitem><para><link linkend="_classthread_1_1atomicx_1_1smart_mutex_1a5b8fb66f18cb6ee0359a2533da1d006d">smartMutex</link> (<link linkend="_classthread_1_1atomicx_1_1mutex">mutex</link> &amp;lockObj)</para>

<para>Construct a new Smart Lock object based a existing lock. </para>
</listitem>
            <listitem><para><link linkend="_classthread_1_1atomicx_1_1smart_mutex_1a554ae8131db4aee6906c0e76d80a9dff">~smartMutex</link> ()</para>

<para>Destroy and release the smart lock taken. </para>
</listitem>
            <listitem><para>bool <link linkend="_classthread_1_1atomicx_1_1smart_mutex_1aa5b3d280151b1a303aa065a67f7b0620">SharedLock</link> ()</para>

<para>Accquire a SharedLock. </para>
</listitem>
            <listitem><para>bool <link linkend="_classthread_1_1atomicx_1_1smart_mutex_1a0b0904835f6dab9f1a38189e7d71f2a1">Lock</link> ()</para>

<para>Accquire a exclusive Lock. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classthread_1_1atomicx_1_1smart_mutex_1a2c414c6e2020b9592452556712cf5529">IsShared</link> ()</para>

<para>Check how many shared locks are accquired. </para>
</listitem>
            <listitem><para>bool <link linkend="_classthread_1_1atomicx_1_1smart_mutex_1a52b25e23f3576f107f17b816b38d496c">IsLocked</link> ()</para>

<para>Check if a exclusive lock has been already accquired. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>RII compliance lock/shared lock to auto unlock on destruction. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classthread_1_1atomicx_1_1smart_mutex_1a9d85d1b131df0b9c0828b24c80dee4ca"/><section>
    <title>smartMutex()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>smartMutex</primary><secondary>thread::atomicx::smartMutex</secondary></indexterm>
<indexterm><primary>thread::atomicx::smartMutex</primary><secondary>smartMutex</secondary></indexterm>
<para><computeroutput>thread::atomicx::smartMutex::smartMutex ( )<computeroutput>[delete]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classthread_1_1atomicx_1_1smart_mutex_1a5b8fb66f18cb6ee0359a2533da1d006d"/><section>
    <title>smartMutex()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>smartMutex</primary><secondary>thread::atomicx::smartMutex</secondary></indexterm>
<indexterm><primary>thread::atomicx::smartMutex</primary><secondary>smartMutex</secondary></indexterm>
<para><computeroutput>thread::atomicx::smartMutex::smartMutex (<link linkend="_classthread_1_1atomicx_1_1mutex">mutex</link> &amp; lockObj)</computeroutput></para><para>

<para>Construct a new Smart Lock object based a existing lock. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>lockObj</entry><entry>
<para>the existing lock object </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1smart_mutex_1a554ae8131db4aee6906c0e76d80a9dff"/><section>
    <title>~smartMutex()</title>
<indexterm><primary>~smartMutex</primary><secondary>thread::atomicx::smartMutex</secondary></indexterm>
<indexterm><primary>thread::atomicx::smartMutex</primary><secondary>~smartMutex</secondary></indexterm>
<para><computeroutput>thread::atomicx::smartMutex::~smartMutex ( )</computeroutput></para><para>

<para>Destroy and release the smart lock taken. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classthread_1_1atomicx_1_1smart_mutex_1a52b25e23f3576f107f17b816b38d496c"/><section>
    <title>IsLocked()</title>
<indexterm><primary>IsLocked</primary><secondary>thread::atomicx::smartMutex</secondary></indexterm>
<indexterm><primary>thread::atomicx::smartMutex</primary><secondary>IsLocked</secondary></indexterm>
<para><computeroutput>bool thread::atomicx::smartMutex::IsLocked ( )</computeroutput></para><para>

<para>Check if a exclusive lock has been already accquired. </para>
</para>

<para><formalpara><title>Returns</title>

<para>true if yes, otherwise false </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1smart_mutex_1a2c414c6e2020b9592452556712cf5529"/><section>
    <title>IsShared()</title>
<indexterm><primary>IsShared</primary><secondary>thread::atomicx::smartMutex</secondary></indexterm>
<indexterm><primary>thread::atomicx::smartMutex</primary><secondary>IsShared</secondary></indexterm>
<para><computeroutput>size_t thread::atomicx::smartMutex::IsShared ( )</computeroutput></para><para>

<para>Check how many shared locks are accquired. </para>
</para>

<para><formalpara><title>Returns</title>

<para>size_t Number of threads holding shared locks </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1smart_mutex_1a0b0904835f6dab9f1a38189e7d71f2a1"/><section>
    <title>Lock()</title>
<indexterm><primary>Lock</primary><secondary>thread::atomicx::smartMutex</secondary></indexterm>
<indexterm><primary>thread::atomicx::smartMutex</primary><secondary>Lock</secondary></indexterm>
<para><computeroutput>bool thread::atomicx::smartMutex::Lock ( )</computeroutput></para><para>

<para>Accquire a exclusive Lock. </para>
</para>

<para><formalpara><title>Returns</title>

<para>true if accquired, false if another accquisition was already done </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1smart_mutex_1aa5b3d280151b1a303aa065a67f7b0620"/><section>
    <title>SharedLock()</title>
<indexterm><primary>SharedLock</primary><secondary>thread::atomicx::smartMutex</secondary></indexterm>
<indexterm><primary>thread::atomicx::smartMutex</primary><secondary>SharedLock</secondary></indexterm>
<para><computeroutput>bool thread::atomicx::smartMutex::SharedLock ( )</computeroutput></para><para>

<para>Accquire a SharedLock. </para>
</para>

<para><formalpara><title>Returns</title>

<para>true if accquired, false if another accquisition was already done </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
atomicx/<link linkend="_atomicx_8hpp">atomicx.hpp</link>atomicx/<link linkend="_atomicx_8cpp">atomicx.cpp</link></section>
</section>
