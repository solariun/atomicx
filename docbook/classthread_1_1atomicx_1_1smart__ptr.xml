<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classthread_1_1atomicx_1_1smart__ptr" xml:lang="en-US">
<title>thread::atomicx::smart_ptr&lt; T &gt; Class Template Reference</title>
<indexterm><primary>thread::atomicx::smart_ptr&lt; T &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;atomicx.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classthread_1_1atomicx_1_1smart__ptr_1abd3bb69e7f9a2e9dedca04f7d93229eb">smart_ptr</link> (T *p)</para>

<para>smart pointer constructor </para>
</listitem>
            <listitem><para><link linkend="_classthread_1_1atomicx_1_1smart__ptr_1af41f483cd1d6d3da6058dc9d091fa05a">smart_ptr</link> (const <link linkend="_classthread_1_1atomicx_1_1smart__ptr">smart_ptr</link>&lt; T &gt; &amp;sa)</para>

<para>smart pointer overload constructor </para>
</listitem>
            <listitem><para><link linkend="_classthread_1_1atomicx_1_1smart__ptr">smart_ptr</link>&lt; T &gt; &amp; <link linkend="_classthread_1_1atomicx_1_1smart__ptr_1a7f5dbdbf443f8fa749f1470b9efe2675">operator=</link> (const <link linkend="_classthread_1_1atomicx_1_1smart__ptr">smart_ptr</link>&lt; T &gt; &amp;sa)</para>

<para>Smart pointer Assignment operator. </para>
</listitem>
            <listitem><para><link linkend="_classthread_1_1atomicx_1_1smart__ptr_1aed20056284a189d47f33a6532ac96032">~smart_ptr</link> (void)</para>

<para>Smart pointer destructor. </para>
</listitem>
            <listitem><para>T * <link linkend="_classthread_1_1atomicx_1_1smart__ptr_1a8eea686bdd840bbde6503c69401c7b26">operator-&gt;</link> (void)</para>

<para>Smart pointer access operator. </para>
</listitem>
            <listitem><para>T &amp; <link linkend="_classthread_1_1atomicx_1_1smart__ptr_1a693e8bce82144dec45ce8f778355891b">operator&amp;</link> (void)</para>

<para>Smart pointer access operator. </para>
</listitem>
            <listitem><para>bool <link linkend="_classthread_1_1atomicx_1_1smart__ptr_1afe8508e74933406cb48630d4b0767317">IsValid</link> (void)</para>

<para>Check if the referece still valid. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classthread_1_1atomicx_1_1smart__ptr_1a6e899e672b813241bfb308c4cd0a2b8a">GetRefCounter</link> (void)</para>

<para>Get the Ref Counter of the managed pointer. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename T&gt;
class thread::atomicx::smart_ptr&lt; T &gt;</title></simplesect>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
 </para>
<section xml:id="_classthread_1_1atomicx_1_1smart__ptr_1autotoc_md5">
<title>SUPLEMENTAR SMART_PTR IMPLEMENTATION</title>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classthread_1_1atomicx_1_1smart__ptr_1abd3bb69e7f9a2e9dedca04f7d93229eb"/><section>
    <title>smart_ptr()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>smart_ptr</primary><secondary>thread::atomicx::smart_ptr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>thread::atomicx::smart_ptr&lt; T &gt;</primary><secondary>smart_ptr</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classthread_1_1atomicx_1_1smart__ptr">thread::atomicx::smart_ptr</link>&lt; T &gt;::smart_ptr (T * p)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>smart pointer constructor </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>p</entry><entry>
<para>pointer type T to be managed </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1smart__ptr_1af41f483cd1d6d3da6058dc9d091fa05a"/><section>
    <title>smart_ptr()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>smart_ptr</primary><secondary>thread::atomicx::smart_ptr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>thread::atomicx::smart_ptr&lt; T &gt;</primary><secondary>smart_ptr</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classthread_1_1atomicx_1_1smart__ptr">thread::atomicx::smart_ptr</link>&lt; T &gt;::smart_ptr (const <link linkend="_classthread_1_1atomicx_1_1smart__ptr">smart_ptr</link>&lt; T &gt; &amp; sa)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>smart pointer overload constructor </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sa</entry><entry>
<para>Smart pointer reference </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1smart__ptr_1aed20056284a189d47f33a6532ac96032"/><section>
    <title>~smart_ptr()</title>
<indexterm><primary>~smart_ptr</primary><secondary>thread::atomicx::smart_ptr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>thread::atomicx::smart_ptr&lt; T &gt;</primary><secondary>~smart_ptr</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classthread_1_1atomicx_1_1smart__ptr">thread::atomicx::smart_ptr</link>&lt; T &gt;::~<link linkend="_classthread_1_1atomicx_1_1smart__ptr">smart_ptr</link> (void )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Smart pointer destructor. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classthread_1_1atomicx_1_1smart__ptr_1a6e899e672b813241bfb308c4cd0a2b8a"/><section>
    <title>GetRefCounter()</title>
<indexterm><primary>GetRefCounter</primary><secondary>thread::atomicx::smart_ptr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>thread::atomicx::smart_ptr&lt; T &gt;</primary><secondary>GetRefCounter</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>size_t <link linkend="_classthread_1_1atomicx_1_1smart__ptr">thread::atomicx::smart_ptr</link>&lt; T &gt;::GetRefCounter (void )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the Ref Counter of the managed pointer. </para>
</para>

<para><formalpara><title>Returns</title>

<para>size_t How much active references </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1smart__ptr_1afe8508e74933406cb48630d4b0767317"/><section>
    <title>IsValid()</title>
<indexterm><primary>IsValid</primary><secondary>thread::atomicx::smart_ptr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>thread::atomicx::smart_ptr&lt; T &gt;</primary><secondary>IsValid</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool <link linkend="_classthread_1_1atomicx_1_1smart__ptr">thread::atomicx::smart_ptr</link>&lt; T &gt;::IsValid (void )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Check if the referece still valid. </para>
</para>

<para><formalpara><title>Returns</title>

<para>true if the reference still not null, otherwise false </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1smart__ptr_1a693e8bce82144dec45ce8f778355891b"/><section>
    <title>operator&amp;()</title>
<indexterm><primary>operator&amp;</primary><secondary>thread::atomicx::smart_ptr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>thread::atomicx::smart_ptr&lt; T &gt;</primary><secondary>operator&amp;</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T &amp; <link linkend="_classthread_1_1atomicx_1_1smart__ptr">thread::atomicx::smart_ptr</link>&lt; T &gt;::operator&amp; (void )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Smart pointer access operator. </para>
</para>

<para><formalpara><title>Returns</title>

<para>T* Reference for the managed object T </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1smart__ptr_1a8eea686bdd840bbde6503c69401c7b26"/><section>
    <title>operator-&gt;()</title>
<indexterm><primary>operator-&gt;</primary><secondary>thread::atomicx::smart_ptr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>thread::atomicx::smart_ptr&lt; T &gt;</primary><secondary>operator-&gt;</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T * <link linkend="_classthread_1_1atomicx_1_1smart__ptr">thread::atomicx::smart_ptr</link>&lt; T &gt;::operator-&gt; (void )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Smart pointer access operator. </para>
</para>

<para><formalpara><title>Returns</title>

<para>T* Pointer for the managed object T </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classthread_1_1atomicx_1_1smart__ptr_1a7f5dbdbf443f8fa749f1470b9efe2675"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>thread::atomicx::smart_ptr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>thread::atomicx::smart_ptr&lt; T &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classthread_1_1atomicx_1_1smart__ptr">smart_ptr</link>&lt; T &gt; &amp; <link linkend="_classthread_1_1atomicx_1_1smart__ptr">thread::atomicx::smart_ptr</link>&lt; T &gt;::operator= (const <link linkend="_classthread_1_1atomicx_1_1smart__ptr">smart_ptr</link>&lt; T &gt; &amp; sa)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Smart pointer Assignment operator. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sa</entry><entry>
<para>Smart poiter reference</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>smart_ptr&lt;T&gt;&amp; smart pointer this reference. </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
atomicx/<link linkend="_atomicx_8hpp">atomicx.hpp</link></section>
</section>
