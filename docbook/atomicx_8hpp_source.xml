<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_atomicx_8hpp_source" xml:lang="en-US">
<title>atomicx.hpp</title>
<indexterm><primary>atomicx/atomicx.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//</emphasis>
2 <emphasis role="comment">//&#32;&#32;atomic.hpp</emphasis>
3 <emphasis role="comment">//&#32;&#32;atomic</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;&#32;Created&#32;by&#32;GUSTAVO&#32;CAMPOS&#32;on&#32;29/08/2021.</emphasis>
6 <emphasis role="comment">//</emphasis>
7 
8 <emphasis role="preprocessor">#ifndef&#32;atomic_hpp</emphasis>
9 <emphasis role="preprocessor">#define&#32;atomic_hpp</emphasis>
10 
11 <emphasis role="preprocessor">#include&#32;&lt;stdint.h&gt;</emphasis>
12 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
13 <emphasis role="preprocessor">#include&#32;&lt;setjmp.h&gt;</emphasis>
14 
15 <emphasis role="comment">/*&#32;Official&#32;version&#32;*/</emphasis>
16 <emphasis role="preprocessor">#define&#32;ATOMICX_VERSION&#32;&quot;1.2.1&quot;</emphasis>
17 <emphasis role="preprocessor">#define&#32;ATOMIC_VERSION_LABEL&#32;&quot;AtomicX&#32;v&quot;</emphasis>&#32;ATOMICX_VERSION&#32;&quot;&#32;built&#32;at&#32;&quot;&#32;__TIMESTAMP__
18 
19 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;=&#32;uint32_t;
20 
21 <emphasis role="preprocessor">#define&#32;ATOMICX_TIME_MAX&#32;((atomicx_time)&#32;~0)</emphasis>
22 
23 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>
24 {
25 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_atomicx_8hpp_1a7cb51f5c2b5cad3766f19eb69c92793b">yield</link>(<emphasis role="keywordtype">void</emphasis>);
26 }
27 
33 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;<link linkend="_atomicx_8hpp_1acba4f7fe589a5ea034da546e90039207">Atomicx_GetTick</link>(<emphasis role="keywordtype">void</emphasis>);
34 
43 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_atomicx_8hpp_1a965c93519ae7ab7036d1acaae0ae025a">Atomicx_SleepTick</link>(<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;nSleep);
44 
45 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacethread">thread</link>
46 {
47 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classthread_1_1atomicx">atomicx</link>
48 &#32;&#32;&#32;&#32;{
49 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
50 
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a82633f5364d51f3b5a8dfed1e93007ed">aTypes</link>&#32;:&#32;uint8_t
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start=1,
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;running=5,
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;now=6,
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop=10,
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock=50,
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wait=55,
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subscription=60,
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sleep=100,
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stackOverflow=255
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
68 
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;:&#32;uint8_t
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error=10,
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ok,
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;look,
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wait,
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;timeout
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
77 
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275ab">NotifyType</link>&#32;:&#32;uint8_t
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;one&#32;=&#32;0,
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;all&#32;=&#32;1
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
83 
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classthread_1_1atomicx_1_1_timeout">Timeout</link>
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1_timeout_1a5fbf489b1b2c30845205e81f60de4459">Timeout</link>&#32;()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
92 
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1_timeout_1a5fbf489b1b2c30845205e81f60de4459">Timeout</link>&#32;(<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;nTimoutValue);
103 
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1_timeout_1a3e76e4c3e7c50ea6b79b10ce352ea6b4">Set</link>(<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;nTimoutValue);
110 
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1_timeout_1ac28470eb9269efba7b924b2d2a924839">IsTimedout</link>();
117 
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;<link linkend="_classthread_1_1atomicx_1_1_timeout_1acd51ff00b51d2bde7722492e9f0bf702">GetRemaining</link>();
124 
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;<link linkend="_classthread_1_1atomicx_1_1_timeout_1a06e6376b17211c0c78668e3b91309488">GetDurationSince</link>(<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;startTime);
136 
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;m_timeoutValue&#32;=&#32;0;
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classthread_1_1atomicx_1_1aiterator">aiterator</link>
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1aiterator_1aaa51d5ea0bc46d03854df6537e3f926e">aiterator</link>()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
149 
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1aiterator_1aaa51d5ea0bc46d03854df6537e3f926e">aiterator</link>(<link linkend="_classthread_1_1atomicx">atomicx</link>*&#32;ptr);
156 
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
158 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Access&#32;operator</emphasis>
159 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx">atomicx</link>&amp;&#32;<link linkend="_classthread_1_1atomicx_1_1aiterator_1a551cb143a8bff765ca42ee9288669232">operator*</link>()&#32;<emphasis role="keyword">const</emphasis>;
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx">atomicx</link>*&#32;<link linkend="_classthread_1_1atomicx_1_1aiterator_1a086a51f1704ffb3a90e3bb53dce9009a">operator-&gt;</link>();
162 
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
164 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Movement&#32;operator</emphasis>
165 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1aiterator">aiterator</link>&amp;&#32;<link linkend="_classthread_1_1atomicx_1_1aiterator_1a1cc6593d9e6af14655cf27e394c02075">operator++</link>();
167 
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
169 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Binary&#32;operators</emphasis>
170 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1aiterator_1a6d6832be1fa84f72cd3fcbb466f6a85d">operator== </link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1aiterator">aiterator</link>&amp;&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1aiterator">aiterator</link>&amp;&#32;b){&#32;<emphasis role="keywordflow">return</emphasis>&#32;a.m_ptr&#32;==&#32;b.m_ptr;};
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1aiterator_1a8a391b8468be3ca0082e2a3963895c53">operator!= </link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1aiterator">aiterator</link>&amp;&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1aiterator">aiterator</link>&amp;&#32;b){&#32;<emphasis role="keywordflow">return</emphasis>&#32;a.m_ptr&#32;!=&#32;b.m_ptr;};
173 
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx">atomicx</link>*&#32;m_ptr;
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
177 
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;aiterator&#32;<link linkend="_classthread_1_1atomicx_1a0e188b4cdad5fb7f9fff7cd1e0f438aa">begin</link>(<emphasis role="keywordtype">void</emphasis>);
184 
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;aiterator&#32;<link linkend="_classthread_1_1atomicx_1a8a832099edb224496c7ba204695138c7">end</link>(<emphasis role="keywordtype">void</emphasis>);
191 
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classthread_1_1atomicx_1_1smart__ptr">smart_ptr</link>
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
200 
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1smart__ptr_1abd3bb69e7f9a2e9dedca04f7d93229eb">smart_ptr</link>(T*&#32;p)&#32;:&#32;pRef&#32;(new&#32;reference&#32;{p,&#32;1})
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
208 
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1smart__ptr_1af41f483cd1d6d3da6058dc9d091fa05a">smart_ptr</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart__ptr">smart_ptr&lt;T&gt;</link>&amp;&#32;sa)
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pRef&#32;=&#32;sa.pRef;
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pRef-&gt;nRC++;
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
219 
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1smart__ptr">smart_ptr&lt;T&gt;</link>&amp;&#32;<link linkend="_classthread_1_1atomicx_1_1smart__ptr_1a7f5dbdbf443f8fa749f1470b9efe2675">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart__ptr">smart_ptr&lt;T&gt;</link>&amp;&#32;sa)
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pRef&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>&#32;&amp;&amp;&#32;pRef-&gt;nRC&#32;&gt;&#32;0)
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pRef-&gt;nRC--;
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
233 
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pRef&#32;=&#32;sa.pRef;
235 
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pRef&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pRef-&gt;nRC++;
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
240 
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
243 
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1smart__ptr_1aed20056284a189d47f33a6532ac96032">~smart_ptr</link>(<emphasis role="keywordtype">void</emphasis>)
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pRef&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(--pRef-&gt;nRC&#32;==&#32;0)
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;pRef-&gt;pReference;
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;pRef;
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pRef-&gt;nRC--;
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
262 
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T*&#32;<link linkend="_classthread_1_1atomicx_1_1smart__ptr_1a8eea686bdd840bbde6503c69401c7b26">operator-&gt; </link>(<emphasis role="keywordtype">void</emphasis>)
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pRef-&gt;pReference;
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
272 
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&amp;&#32;<link linkend="_classthread_1_1atomicx_1_1smart__ptr_1a693e8bce82144dec45ce8f778355891b">operator&amp; </link>(<emphasis role="keywordtype">void</emphasis>)
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*pRef-&gt;pReference;
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
282 
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart__ptr_1afe8508e74933406cb48630d4b0767317">IsValid</link>(<emphasis role="keywordtype">void</emphasis>)
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pRef&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>&#32;?&#32;false&#32;:&#32;pRef-&gt;pReference&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>&#32;?&#32;false&#32;:&#32;<emphasis role="keyword">true</emphasis>;
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
292 
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart__ptr_1a6e899e672b813241bfb308c4cd0a2b8a">GetRefCounter</link>(<emphasis role="keywordtype">void</emphasis>)
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pRef&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pRef-&gt;nRC;
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
304 
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
307 
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
309 
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1smart__ptr">smart_ptr</link>(<emphasis role="keywordtype">void</emphasis>)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>reference
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T*&#32;pReference&#32;;
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nRC;
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
316 
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference*&#32;pRef=<emphasis role="keyword">nullptr</emphasis>;
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
319 
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classthread_1_1atomicx_1_1queue">queue</link>
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
330 
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1add5bbf800088cdfc80a1755313a581f0">queue</link>()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
332 
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1ae5da8d8eb6ac0252579b9564b6b43ac7">queue</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;nQSize):m_nQSize(nQSize),&#32;m_nItens{0}
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
340 
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1a4b4d6999fddf5e8d33c533b8c697219e">PushBack</link>(T&#32;item)
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_nItens&#32;&gt;=&#32;m_nQSize)
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classthread_1_1atomicx_1a0a73c90e27fec5dea704c430c36e0cee">atomicx::GetCurrent</link>()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1a0a73c90e27fec5dea704c430c36e0cee">atomicx::GetCurrent</link>()-&gt;<link linkend="_classthread_1_1atomicx_1a51434a435b3470ee885272a18e7838bb">Wait</link>(*<emphasis role="keyword">this</emphasis>,1);
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
362 
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item">QItem</link>*&#32;pQItem&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item">QItem</link>(item);
364 
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_pQIStart&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pQIStart&#32;=&#32;m_pQIEnd&#32;=&#32;pQItem;
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pQIEnd-&gt;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item_1a458fd02eb19f4f54c29049fd2fe11b82">SetNext</link>(*pQItem);
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pQIEnd&#32;=&#32;pQItem;
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
374 
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_nItens++;
376 
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classthread_1_1atomicx_1a0a73c90e27fec5dea704c430c36e0cee">atomicx::GetCurrent</link>()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1a0a73c90e27fec5dea704c430c36e0cee">atomicx::GetCurrent</link>()-&gt;<link linkend="_classthread_1_1atomicx_1a8b3845a6f977e4fc9644e996d4102d75">Notify</link>(*<emphasis role="keyword">this</emphasis>,0);
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
381 
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
384 
385 
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1a82b4525142d10193c74403b1a37acaf8">PushFront</link>(T&#32;item)
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_nItens&#32;&gt;=&#32;m_nQSize)
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classthread_1_1atomicx_1a0a73c90e27fec5dea704c430c36e0cee">atomicx::GetCurrent</link>()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1a0a73c90e27fec5dea704c430c36e0cee">atomicx::GetCurrent</link>()-&gt;<link linkend="_classthread_1_1atomicx_1a51434a435b3470ee885272a18e7838bb">Wait</link>(*<emphasis role="keyword">this</emphasis>,1);
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
407 
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item">QItem</link>*&#32;pQItem&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item">QItem</link>(item);
409 
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_pQIStart&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pQIStart&#32;=&#32;m_pQIEnd&#32;=&#32;pQItem;
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pQItem-&gt;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item_1a458fd02eb19f4f54c29049fd2fe11b82">SetNext</link>(*m_pQIStart);
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pQIStart&#32;=&#32;pQItem;
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
419 
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_nItens++;
421 
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classthread_1_1atomicx_1a0a73c90e27fec5dea704c430c36e0cee">atomicx::GetCurrent</link>()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1a0a73c90e27fec5dea704c430c36e0cee">atomicx::GetCurrent</link>()-&gt;<link linkend="_classthread_1_1atomicx_1a8b3845a6f977e4fc9644e996d4102d75">Notify</link>&#32;&#32;&#32;&#32;(*<emphasis role="keyword">this</emphasis>,0);
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
426 
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
429 
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1ad2ceaec28d52d07f07e049d523535620">Pop</link>()
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_nItens&#32;==&#32;0)
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1a0a73c90e27fec5dea704c430c36e0cee">atomicx::GetCurrent</link>()-&gt;<link linkend="_classthread_1_1atomicx_1a51434a435b3470ee885272a18e7838bb">Wait</link>(*<emphasis role="keyword">this</emphasis>,0);
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
442 
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;pItem&#32;=&#32;m_pQIStart-&gt;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item_1a7f5e845115d01390cb3c3b7a154f0cac">GetItem</link>();
444 
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item">QItem</link>*&#32;p_tmpQItem&#32;=&#32;m_pQIStart;
446 
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pQIStart&#32;=&#32;m_pQIStart-&gt;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item_1a7caa17d0a0791fe555b1fccbaf2b1f5e">GetNext</link>();
448 
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;p_tmpQItem;
450 
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_nItens--;
452 
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classthread_1_1atomicx_1a0a73c90e27fec5dea704c430c36e0cee">atomicx::GetCurrent</link>()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1a0a73c90e27fec5dea704c430c36e0cee">atomicx::GetCurrent</link>()-&gt;<link linkend="_classthread_1_1atomicx_1a8b3845a6f977e4fc9644e996d4102d75">Notify</link>(*<emphasis role="keyword">this</emphasis>,1);
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
457 
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pItem;
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
460 
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1a903751d841f38886ed3c2b19dc3ea3af">GetSize</link>()
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_nItens;
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
470 
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1a21f16fa6b97d5c76d81279ff21983689">GetMaxSize</link>()
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_nQSize;
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
480 
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1aaaf321a852cb004fa2ad8af214b1ebde">IsFull</link>()
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_nItens&#32;&gt;=&#32;m_nQSize;
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
490 
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
492 
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item">QItem</link>
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item_1aafbe1f892b915bdd16770639c075a201">QItem</link>&#32;()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
500 
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item_1a5f9792e2c6fa5c9e72973fe804ece412">QItem</link>(T&amp;&#32;qItem)&#32;:&#32;m_qItem(qItem),&#32;m_pNext(nullptr)
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
508 
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&amp;&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item_1a7f5e845115d01390cb3c3b7a154f0cac">GetItem</link>()
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_qItem;
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
518 
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classthread_1_1atomicx_1_1queue">queue</link>;
521 
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item_1a458fd02eb19f4f54c29049fd2fe11b82">SetNext</link>&#32;(<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item">QItem</link>&amp;&#32;qItem)
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pNext&#32;=&#32;&amp;qItem;
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
531 
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item">QItem</link>*&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item_1a7caa17d0a0791fe555b1fccbaf2b1f5e">GetNext</link>&#32;()
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_pNext;
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
541 
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
543 
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;m_qItem;
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1queue_1_1_q_item">QItem</link>*&#32;m_pNext;
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
547 
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_nQSize;
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_nItens;
551 
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;QItem*&#32;m_pQIEnd&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;QItem*&#32;m_pQIStart&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
554 
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
556 
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classthread_1_1atomicx_1_1semaphore">semaphore</link>
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1semaphore_1a79d76e6e1ee01a6677883905e7087e09">semaphore</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;nMaxShared);
572 
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1semaphore_1a3878e64275d2b5ff7e2ac048c8ef3f71">acquire</link>(<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;nTimeout&#32;=&#32;0);
581 
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1semaphore_1a1709f7143fe5b61c059b5863b96a97f1">release</link>();
586 
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1semaphore_1ad75031cc128b92ac9c88c53506ac6d43">GetCount</link>();
593 
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1semaphore_1a62bc2b7526553d6b2ad72da530adf4cb">GetWaitCount</link>();
600 
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1semaphore_1a00091856b2f9a2c0fe74c6f906889a33">GetMaxAcquired</link>();
607 
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1semaphore_1ade0023e9bf71f3ea941281355e0a0559">GetMax</link>&#32;();
614 
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_counter=0;
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_maxShared;
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
619 
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classthread_1_1atomicx_1_1smart_semaphore">smartSemaphore</link>
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1smart_semaphore_1ad7207fe696a6befaadc905f7e757d90d">smartSemaphore</link>&#32;(<link linkend="_classthread_1_1atomicx_1_1semaphore">atomicx::semaphore</link>&amp;&#32;sem);
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1smart_semaphore_1ad7207fe696a6befaadc905f7e757d90d">smartSemaphore</link>&#32;()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1smart_semaphore_1a95216c06f59aedcda133b31793142f26">~smartSemaphore</link>();
634 
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart_semaphore_1a86c0c771fc6e940bef97f9eec5d2a6d2">acquire</link>(<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;nTimeout&#32;=&#32;0);
643 
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart_semaphore_1a505e559bca1ffa9ce1932a7df9fda86d">release</link>();
648 
654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart_semaphore_1a4fb6a49221f2de65200f98d8868081ea">GetCount</link>();
655 
661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart_semaphore_1a423e4e0cafcbc1475434035933929383">GetWaitCount</link>();
662 
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart_semaphore_1a63ea759f0af906db9d39ccccfee859ae">GetMaxAcquired</link>();
669 
675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart_semaphore_1a5ca716f4fd9ac336d093520b2864e8ce">GetMax</link>&#32;();
676 
682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart_semaphore_1a00a33f0aab15379311afc3fe20863594">IsAcquired</link>&#32;();
683 
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1semaphore">semaphore</link>&amp;&#32;m_sem;
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;bAcquired&#32;=&#32;<emphasis role="keyword">false</emphasis>;
687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
688 
695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;stamart&#32;mutex&#32;implementation&#32;*/</emphasis>
696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classthread_1_1atomicx_1_1mutex">mutex</link>
697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1mutex_1a0c77ddee2ad50c1aa7564ad2084b6e75">Lock</link>();
708 
712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1mutex_1a74dc56d113bb2f7fbde82d1d9422a01b">Unlock</link>();
713 
721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1mutex_1ab0e0c89eb46152f8095535891069ff3c">SharedLock</link>();
722 
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1mutex_1aa7ac0e33713c28e55ac3a30ecbb10ebe">SharedUnlock</link>();
727 
733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1mutex_1ae66c669f09c131182805680aa894d18d">IsShared</link>();
734 
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1mutex_1aeeda698323932853965044d34a191ebf">IsLocked</link>();
741 
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nSharedLockCount=0;
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;bExclusiveLock=<emphasis role="keyword">false</emphasis>;
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
747 
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classthread_1_1atomicx_1_1smart_mutex">smartMutex</link>
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1smart_mutex_1a9d85d1b131df0b9c0828b24c80dee4ca">smartMutex</link>()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
756 
762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1smart_mutex_1a9d85d1b131df0b9c0828b24c80dee4ca">smartMutex</link>&#32;(<link linkend="_classthread_1_1atomicx_1_1mutex">mutex</link>&amp;&#32;lockObj);
763 
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1smart_mutex_1a554ae8131db4aee6906c0e76d80a9dff">~smartMutex</link>();
768 
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart_mutex_1aa5b3d280151b1a303aa065a67f7b0620">SharedLock</link>();
775 
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart_mutex_1a0b0904835f6dab9f1a38189e7d71f2a1">Lock</link>();
782 
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart_mutex_1a2c414c6e2020b9592452556712cf5529">IsShared</link>();
789 
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1_1smart_mutex_1a52b25e23f3576f107f17b816b38d496c">IsLocked</link>();
796 
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
798 
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1mutex">mutex</link>&amp;&#32;m_lock;
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;m_lockType&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
802 
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1ac460ddbc6a7201689a762fb8d3c35397">~atomicx</link>(<emphasis role="keywordtype">void</emphasis>);
811 
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classthread_1_1atomicx">atomicx</link>*&#32;<link linkend="_classthread_1_1atomicx_1a0a73c90e27fec5dea704c430c36e0cee">GetCurrent</link>();
818 
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a64de6117b863b3d2edd217798d9c27f4">Start</link>(<emphasis role="keywordtype">void</emphasis>);
825 
831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a75865402817f74f5917c958c2cc631ed">GetID</link>(<emphasis role="keywordtype">void</emphasis>);
832 
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1ad58b1b08bf0c0a3fe62affac1bffe845">GetStackSize</link>(<emphasis role="keywordtype">void</emphasis>);
839 
846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;<link linkend="_classthread_1_1atomicx_1a075d951e2432e1e06f04691e3b83b2d5">GetNice</link>(<emphasis role="keywordtype">void</emphasis>);
847 
853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a5bdde2eddb025706719d11632b4450b7">GetUsedStackSize</link>(<emphasis role="keywordtype">void</emphasis>);
854 
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;<link linkend="_classthread_1_1atomicx_1ac357706436b933641d236447cdbd5462">GetCurrentTick</link>(<emphasis role="keywordtype">void</emphasis>);
861 
870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classthread_1_1atomicx_1a06fba915b6d19dd927f28a7b88fa566b">GetName</link>(<emphasis role="keywordtype">void</emphasis>);
871 
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;<link linkend="_classthread_1_1atomicx_1a96d17265ebe39e32586b4e117c15ae68">GetTargetTime</link>(<emphasis role="keywordtype">void</emphasis>);
878 
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a59ff0db3d410d11672a4376432ec8188">GetStatus</link>(<emphasis role="keywordtype">void</emphasis>);
885 
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1ab9b7e5c959deefbe1dfccab55233a0c7">GetSubStatus</link>(<emphasis role="keywordtype">void</emphasis>);
892 
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a238414e659cf1bd1ac7b79eae1de1d10">GetReferenceLock</link>(<emphasis role="keywordtype">void</emphasis>);
899 
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a080c7d232dece44e29b3858fd4f2ac8c">GetTagLock</link>(<emphasis role="keywordtype">void</emphasis>);
906 
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a6663c1d4f9483ee2b00ff01426efb6c7">SetNice</link>&#32;(<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;nice);
913 
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;&#32;<link linkend="_classthread_1_1atomicx_1a06c82de06faf2019a9af23bc75886baa">atomicx</link>(T&#32;(&amp;stack)[N])&#32;:&#32;m_context{},&#32;m_stackSize{N},&#32;m_stack((volatile&#32;uint8_t*)&#32;stack)
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SetDefaultParameters();
923 
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddThisThread();
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
926 
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1a06c82de06faf2019a9af23bc75886baa">atomicx</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;nStackSize=0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nStackIncreasePace=1);
934 
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a8917ef300f396b3d8bc9fdd8aacccf14">run</link>(<emphasis role="keywordtype">void</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
941 
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a8f358048df310da5b3f0b669605fc197">StackOverflowHandler</link>(<emphasis role="keywordtype">void</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
948 
954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a641e79e24059fb3fcaf81ee54a2009be">finish</link>()&#32;noexcept
955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
958 
962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1ae8d4a2b0d8f59ea33a59236d69034cc7">IsStackSelfManaged</link>(<emphasis role="keywordtype">void</emphasis>);
963 
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1ab3dd1245396fc470b7b2c6a31a4455ca">Yield</link>(<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;nSleep=<link linkend="_atomicx_8hpp_1a5f79904e0c0abe4f6120ed97f66b3802">ATOMICX_TIME_MAX</link>);
972 
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;<link linkend="_classthread_1_1atomicx_1af7c7ea1f95881fbc140c2a8f4cbf3c2e">GetLastUserExecTime</link>();
979 
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1aee0a056b991664861eade9caf6adbd32">GetStackIncreasePace</link>(<emphasis role="keywordtype">void</emphasis>);
984 
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a8b38e8d84d71903a9162bcc541235614">YieldNow</link>&#32;(<emphasis role="keywordtype">void</emphasis>);
989 
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1aee21cbd30a48efbf3a55817ad9bfe3e3">SetDynamicNice</link>(<emphasis role="keywordtype">bool</emphasis>&#32;status);
996 
1002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1ae80cbf9f8fc2617eaa168d1281225715">IsDynamicNiceOn</link>();
1003 
1007 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1008 
1013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetDefaultParameters&#32;();
1014 
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetWaitParammeters&#32;(T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag=0,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;asubType&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa49256b9819abacbb8e6e031a03abe81b">aSubTypes::wait</link>)
1016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_TopicId&#32;=&#32;0;
1018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_pLockId&#32;=&#32;(uint8_t*)&amp;refVar;
1019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_aStatus&#32;=&#32;<link linkend="_classthread_1_1atomicx_1a82633f5364d51f3b5a8dfed1e93007eda49256b9819abacbb8e6e031a03abe81b">aTypes::wait</link>;
1020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_aSubStatus&#32;=&#32;asubType;
1021 
1022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lockMessage.<link linkend="_structthread_1_1atomicx_1_1_message_1ab7457184e0619f80130e947efa491693">tag</link>&#32;=&#32;nTag;
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lockMessage.<link linkend="_structthread_1_1atomicx_1_1_message_1adbfe67dd267704f30caa11fa719c2157">message</link>&#32;=&#32;0;
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1025 
1038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;SafeNotifier(<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;nMessage,&#32;T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;subType,&#32;<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275ab">NotifyType</link>&#32;notifyAll=<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275abaf97c5d29941bfb1b2fdab0874906ab82">NotifyType::one</link>)
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nRet&#32;=&#32;0;
1041 
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;thr&#32;:&#32;*<emphasis role="keyword">this</emphasis>)
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(thr.m_aSubStatus&#32;==&#32;subType&#32;&amp;&amp;&#32;thr.m_aStatus&#32;==&#32;<link linkend="_classthread_1_1atomicx_1a82633f5364d51f3b5a8dfed1e93007eda49256b9819abacbb8e6e031a03abe81b">aTypes::wait</link>&#32;&amp;&amp;&#32;thr.m_pLockId&#32;==&#32;(<emphasis role="keywordtype">void</emphasis>*)&#32;&amp;refVar&#32;&amp;&amp;&#32;nTag&#32;==&#32;thr.m_lockMessage.tag)
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;thr.m_TopicId&#32;=&#32;0;
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;thr.m_aStatus&#32;=&#32;<link linkend="_classthread_1_1atomicx_1a82633f5364d51f3b5a8dfed1e93007eda97bc592b27a9ada2d9a4bb418ed0ebed">aTypes::now</link>;
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;thr.m_nTargetTime&#32;=&#32;0;
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;thr.m_pLockId&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1050 
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;thr.m_lockMessage.message&#32;=&#32;nMessage;
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;thr.m_lockMessage.tag&#32;=&#32;nTag;
1053 
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nRet++;
1055 
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(notifyAll&#32;==&#32;<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275abaf97c5d29941bfb1b2fdab0874906ab82">NotifyType::one</link>)
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1062 
1063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nRet;
1064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1065 
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;SafeNotifyLookWaitings(T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag)
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;message=0;
1078 
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SafeNotifier(message,&#32;refVar,&#32;nTag,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa8c4291f6956da81515a5c0caec2976d0">aSubTypes::look</link>,&#32;<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275abaa181a603769c1f98ad927e7367c7aa51">NotifyType::all</link>);
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1081 
1085 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1086 
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structthread_1_1atomicx_1_1_message">Message</link>
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_structthread_1_1atomicx_1_1_message_1ab7457184e0619f80130e947efa491693">tag</link>;
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_structthread_1_1atomicx_1_1_message_1adbfe67dd267704f30caa11fa719c2157">message</link>;
1091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
1092 
1101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_classthread_1_1atomicx_1ab27f5a456d8983f5c17102bc0aaa0da0">GetTopicID</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pszTopic,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nKeyLenght);
1102 
1120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a3a7a1c5a1e645c09c0ff0a6c355404c5">LookForWaitings</link>(T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;hasAtleast,&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;waitFor)
1121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1_1_timeout">Timeout</link>&#32;timeout&#32;(waitFor);
1123 
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((waitFor&#32;==&#32;0&#32;||&#32;timeout.<link linkend="_classthread_1_1atomicx_1_1_timeout_1ac28470eb9269efba7b924b2d2a924839">IsTimedout</link>&#32;()&#32;==&#32;<emphasis role="keyword">false</emphasis>)&#32;&amp;&amp;&#32;<link linkend="_classthread_1_1atomicx_1ad4512ab7de89d7cfd6b5d60c2d986b3e">IsWaiting</link>(refVar,&#32;nTag,&#32;hasAtleast)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
1125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SetWaitParammeters&#32;(refVar,&#32;nTag,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa8c4291f6956da81515a5c0caec2976d0">aSubTypes::look</link>);
1127 
1128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1ab3dd1245396fc470b7b2c6a31a4455ca">Yield</link>(waitFor);
1129 
1130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lockMessage&#32;=&#32;{0,0};
1131 
1132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_aSubStatus&#32;==&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa90272dda245ae1fb3cf197e91a8689dc">aSubTypes::timeout</link>)
1133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1136 
1137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Decrease&#32;the&#32;timeout&#32;time&#32;to&#32;slice&#32;the&#32;remaining&#32;time&#32;otherwise&#32;break&#32;it</emphasis>
1138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(waitFor&#32;&#32;==&#32;0&#32;||&#32;(waitFor&#32;=&#32;timeout.<link linkend="_classthread_1_1atomicx_1_1_timeout_1acd51ff00b51d2bde7722492e9f0bf702">GetRemaining</link>&#32;())&#32;==&#32;0)
1139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1143 
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(timeout.<link linkend="_classthread_1_1atomicx_1_1_timeout_1ac28470eb9269efba7b924b2d2a924839">IsTimedout</link>&#32;())&#32;?&#32;false&#32;:&#32;<emphasis role="keyword">true</emphasis>;
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1146 
1157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1af919d7337b1a6cc5912cd1c7c4fe5ea8">LookForWaitings</link>(T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag,&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;waitFor)
1158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classthread_1_1atomicx_1ad4512ab7de89d7cfd6b5d60c2d986b3e">IsWaiting</link>(refVar,&#32;nTag)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
1160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SetWaitParammeters&#32;(refVar,&#32;nTag,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa8c4291f6956da81515a5c0caec2976d0">aSubTypes::look</link>);
1162 
1163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1ab3dd1245396fc470b7b2c6a31a4455ca">Yield</link>(waitFor);
1164 
1165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lockMessage&#32;=&#32;{0,0};
1166 
1167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_aSubStatus&#32;==&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa90272dda245ae1fb3cf197e91a8689dc">aSubTypes::timeout</link>)
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1172 
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1175 
1189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1ad4512ab7de89d7cfd6b5d60c2d986b3e">IsWaiting</link>(T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag=0,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;hasAtleast&#32;=&#32;1,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;asubType&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa49256b9819abacbb8e6e031a03abe81b">aSubTypes::wait</link>)
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasAtleast&#32;=&#32;hasAtleast&#32;==&#32;0&#32;?&#32;1&#32;:&#32;hasAtleast;
1192 
1193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;thr&#32;:&#32;*<emphasis role="keyword">this</emphasis>)
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(thr.m_aSubStatus&#32;==&#32;asubType&#32;&amp;&amp;&#32;thr.m_aStatus&#32;==&#32;<link linkend="_classthread_1_1atomicx_1a82633f5364d51f3b5a8dfed1e93007eda49256b9819abacbb8e6e031a03abe81b">aTypes::wait</link>&#32;&amp;&amp;&#32;thr.m_pLockId&#32;==&#32;(<emphasis role="keywordtype">void</emphasis>*)&#32;&amp;refVar&#32;&amp;&amp;&#32;(thr.m_lockMessage.tag&#32;==&#32;nTag))
1196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((--hasAtleast)&#32;==&#32;0)
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1203 
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1206 
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1af86a54fe9571c2fbab03c9f62f453ad5">HasWaitings</link>(T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag=0,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;asubType&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa49256b9819abacbb8e6e031a03abe81b">aSubTypes::wait</link>)
1221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nCounter&#32;=&#32;0;
1223 
1224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;thr&#32;:&#32;*<emphasis role="keyword">this</emphasis>)
1225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(thr.m_aSubStatus&#32;==&#32;asubType&#32;&amp;&amp;&#32;thr.m_aStatus&#32;==&#32;<link linkend="_classthread_1_1atomicx_1a82633f5364d51f3b5a8dfed1e93007eda49256b9819abacbb8e6e031a03abe81b">aTypes::wait</link>&#32;&amp;&amp;&#32;thr.m_aStatus&#32;==&#32;<link linkend="_classthread_1_1atomicx_1a82633f5364d51f3b5a8dfed1e93007eda49256b9819abacbb8e6e031a03abe81b">aTypes::wait</link>&#32;&amp;&amp;&#32;thr.m_pLockId&#32;==&#32;(<emphasis role="keywordtype">void</emphasis>*)&#32;&amp;refVar&#32;&amp;&amp;&#32;(thr.m_lockMessage.tag&#32;==&#32;nTag))
1227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nCounter++;
1229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1231 
1232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nCounter;
1233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1234 
1247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a51434a435b3470ee885272a18e7838bb">Wait</link>(<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;nMessage,&#32;T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag=0,&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;waitFor=0,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;asubType&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa49256b9819abacbb8e6e031a03abe81b">aSubTypes::wait</link>)
1248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SafeNotifyLookWaitings(refVar,&#32;nTag);
1250 
1251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SetWaitParammeters&#32;(refVar,&#32;nTag,&#32;asubType);
1252 
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lockMessage.<link linkend="_structthread_1_1atomicx_1_1_message_1ab7457184e0619f80130e947efa491693">tag</link>&#32;=&#32;nTag;
1254 
1255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1ab3dd1245396fc470b7b2c6a31a4455ca">Yield</link>(waitFor);
1256 
1257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;bRet&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1258 
1259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_aSubStatus&#32;!=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa90272dda245ae1fb3cf197e91a8689dc">aSubTypes::timeout</link>)
1260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nMessage&#32;=&#32;m_lockMessage.<link linkend="_structthread_1_1atomicx_1_1_message_1adbfe67dd267704f30caa11fa719c2157">message</link>;
1262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bRet&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1264 
1265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lockMessage&#32;=&#32;{0,0};
1266 
1267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_aSubStatus&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa444bcb3a3fcf8389296c49467f27e1d6">aSubTypes::ok</link>;
1268 
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bRet;
1270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1271 
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1aae81685ea59341f64a4b3d8cc5886563">Wait</link>(T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag=0,&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;waitFor=0,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;asubType&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa49256b9819abacbb8e6e031a03abe81b">aSubTypes::wait</link>)
1285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SafeNotifyLookWaitings(refVar,&#32;nTag);
1287 
1288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SetWaitParammeters&#32;(refVar,&#32;nTag,&#32;asubType);
1289 
1290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lockMessage.<link linkend="_structthread_1_1atomicx_1_1_message_1ab7457184e0619f80130e947efa491693">tag</link>&#32;=&#32;nTag;
1291 
1292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1ab3dd1245396fc470b7b2c6a31a4455ca">Yield</link>(waitFor);
1293 
1294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;bRet&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1295 
1296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_aSubStatus&#32;!=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa90272dda245ae1fb3cf197e91a8689dc">aSubTypes::timeout</link>)
1297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bRet&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1300 
1301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_lockMessage&#32;=&#32;{0,0};
1302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_aSubStatus&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa444bcb3a3fcf8389296c49467f27e1d6">aSubTypes::ok</link>;
1303 
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bRet;
1305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1306 
1321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a1cb98240204ba7c5981ad9ffba095253">SafeNotify</link>(<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;nMessage,&#32;T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag=0,&#32;&#32;<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275ab">NotifyType</link>&#32;notifyAll=<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275abaf97c5d29941bfb1b2fdab0874906ab82">NotifyType::one</link>,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;asubType&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa49256b9819abacbb8e6e031a03abe81b">aSubTypes::wait</link>)
1322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SafeNotifier(nMessage,&#32;refVar,&#32;nTag,&#32;asubType,&#32;notifyAll);
1324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1325 
1340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a8b3845a6f977e4fc9644e996d4102d75">Notify</link>(<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;nMessage,&#32;T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag=0,&#32;<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275ab">NotifyType</link>&#32;notifyAll=<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275abaf97c5d29941bfb1b2fdab0874906ab82">NotifyType::one</link>,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;asubType&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa49256b9819abacbb8e6e031a03abe81b">aSubTypes::wait</link>)
1341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bRet&#32;=&#32;<link linkend="_classthread_1_1atomicx_1a1cb98240204ba7c5981ad9ffba095253">SafeNotify</link>&#32;(nMessage,&#32;refVar,&#32;nTag,&#32;notifyAll,&#32;asubType);
1343 
1344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bRet)&#32;<link linkend="_classthread_1_1atomicx_1ab3dd1245396fc470b7b2c6a31a4455ca">Yield</link>(0);
1345 
1346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bRet;
1347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1348 
1349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a401db852c22e1982ae5c184ec93423c0">Notify</link>(<emphasis role="keywordtype">size_t</emphasis>&amp;&amp;&#32;nMessage,&#32;T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag=0,&#32;<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275ab">NotifyType</link>&#32;notifyAll=<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275abaf97c5d29941bfb1b2fdab0874906ab82">NotifyType::one</link>,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;asubType&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa49256b9819abacbb8e6e031a03abe81b">aSubTypes::wait</link>)
1350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bRet&#32;=&#32;<link linkend="_classthread_1_1atomicx_1a1cb98240204ba7c5981ad9ffba095253">SafeNotify</link>&#32;(nMessage,&#32;refVar,&#32;nTag,&#32;notifyAll,&#32;asubType);
1352 
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bRet)&#32;<link linkend="_classthread_1_1atomicx_1ab3dd1245396fc470b7b2c6a31a4455ca">Yield</link>(0);
1354 
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bRet;
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1357 
1373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a91a943d6b7dbce240fb8bc611edead6b">SyncNotify</link>(<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;nMessage,&#32;T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag=0,&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;waitForWaitings=0,&#32;<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275ab">NotifyType</link>&#32;notifyAll=<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275abaf97c5d29941bfb1b2fdab0874906ab82">NotifyType::one</link>,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;asubType&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa49256b9819abacbb8e6e031a03abe81b">aSubTypes::wait</link>)
1374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classthread_1_1atomicx_1a3a7a1c5a1e645c09c0ff0a6c355404c5">LookForWaitings</link>&#32;(refVar,&#32;nTag,&#32;waitForWaitings)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
1376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1379 
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bRet&#32;=&#32;<link linkend="_classthread_1_1atomicx_1a1cb98240204ba7c5981ad9ffba095253">SafeNotify</link>&#32;(nMessage,&#32;refVar,&#32;nTag,&#32;notifyAll,&#32;asubType);
1381 
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bRet)&#32;<link linkend="_classthread_1_1atomicx_1ab3dd1245396fc470b7b2c6a31a4455ca">Yield</link>(0);
1383 
1384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bRet;
1385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1386 
1387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a7e4e0bf42bafa19be930b43b72d244f7">SyncNotify</link>(<emphasis role="keywordtype">size_t</emphasis>&amp;&amp;&#32;nMessage,&#32;T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag=0,&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;waitForWaitings=0,&#32;<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275ab">NotifyType</link>&#32;notifyAll=<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275abaf97c5d29941bfb1b2fdab0874906ab82">NotifyType::one</link>,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;asubType&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa49256b9819abacbb8e6e031a03abe81b">aSubTypes::wait</link>)
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classthread_1_1atomicx_1a3a7a1c5a1e645c09c0ff0a6c355404c5">LookForWaitings</link>&#32;(refVar,&#32;nTag,&#32;waitForWaitings)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1393 
1394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bRet&#32;=&#32;<link linkend="_classthread_1_1atomicx_1a1cb98240204ba7c5981ad9ffba095253">SafeNotify</link>&#32;(nMessage,&#32;refVar,&#32;nTag,&#32;notifyAll,&#32;asubType);
1395 
1396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bRet)&#32;<link linkend="_classthread_1_1atomicx_1ab3dd1245396fc470b7b2c6a31a4455ca">Yield</link>(0);
1397 
1398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bRet;
1399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1400 
1414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a3658882cb26cc60166bf7b29a7024d14">SafeNotify</link>(T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag=0,&#32;<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275ab">NotifyType</link>&#32;notifyAll=<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275abaf97c5d29941bfb1b2fdab0874906ab82">NotifyType::one</link>,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;asubType&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa49256b9819abacbb8e6e031a03abe81b">aSubTypes::wait</link>)
1415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;message=0;
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SafeNotifier&#32;(message,&#32;refVar,&#32;nTag,&#32;asubType,&#32;notifyAll);
1418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1419 
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1aad548d78d129a70a9e68862e06d4db9d">SyncNotify</link>(T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag,&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;waitForWaitings=0,&#32;<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275ab">NotifyType</link>&#32;notifyAll=<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275abaf97c5d29941bfb1b2fdab0874906ab82">NotifyType::one</link>,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;asubType&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa49256b9819abacbb8e6e031a03abe81b">aSubTypes::wait</link>)
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classthread_1_1atomicx_1a3a7a1c5a1e645c09c0ff0a6c355404c5">LookForWaitings</link>&#32;(refVar,&#32;nTag,&#32;waitForWaitings)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
1437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1440 
1441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bRet&#32;=&#32;<link linkend="_classthread_1_1atomicx_1a1cb98240204ba7c5981ad9ffba095253">SafeNotify</link>(refVar,&#32;nTag,&#32;notifyAll,&#32;asubType);
1442 
1443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bRet)&#32;<link linkend="_classthread_1_1atomicx_1ab3dd1245396fc470b7b2c6a31a4455ca">Yield</link>(0);
1444 
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bRet;
1446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1447 
1461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1ad1d6b634c9c90c1c15acc391f2b97671">Notify</link>(T&amp;&#32;refVar,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nTag=0,&#32;<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275ab">NotifyType</link>&#32;notifyAll=<link linkend="_classthread_1_1atomicx_1a95cb3ab240d8e0c05e70f6d7a55275abaf97c5d29941bfb1b2fdab0874906ab82">NotifyType::one</link>,&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;asubType&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa49256b9819abacbb8e6e031a03abe81b">aSubTypes::wait</link>)
1462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bRet&#32;=&#32;<link linkend="_classthread_1_1atomicx_1a1cb98240204ba7c5981ad9ffba095253">SafeNotify</link>(refVar,&#32;nTag,&#32;notifyAll,&#32;asubType);
1464 
1465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bRet)&#32;<link linkend="_classthread_1_1atomicx_1ab3dd1245396fc470b7b2c6a31a4455ca">Yield</link>(0);
1466 
1467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bRet;
1468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1469 
1485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a407be004173a7db41834eb58fb8f4436">WaitBrokerMessage</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pszKey,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nKeyLenght,&#32;Message&amp;&#32;message);
1486 
1495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a407be004173a7db41834eb58fb8f4436">WaitBrokerMessage</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pszKey,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nKeyLenght);
1496 
1506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1afc67058a34cd39f3f853a7f9a2ae84fd">Publish</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pszKey,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nKeyLenght,&#32;<emphasis role="keyword">const</emphasis>&#32;Message&#32;message);
1507 
1519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a5b238f8831ae0cb3a53c685123e5a5d8">SafePublish</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pszKey,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nKeyLenght,&#32;<emphasis role="keyword">const</emphasis>&#32;Message&#32;message);
1520 
1529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1afc67058a34cd39f3f853a7f9a2ae84fd">Publish</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pszKey,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nKeyLenght);
1530 
1541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a5b238f8831ae0cb3a53c685123e5a5d8">SafePublish</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pszKey,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nKeyLenght);
1542 
1551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1ab6b7c287310a686e589c57947084124b">HasSubscriptions</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pszTopic,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nKeyLenght);
1552 
1560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1ab6b7c287310a686e589c57947084124b">HasSubscriptions</link>&#32;(uint32_t&#32;nKeyID);
1561 
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1ae43c2d0de94878ce0602a3b40d4deeba">BrokerHandler</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pszKey,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nKeyLenght,&#32;<link linkend="_structthread_1_1atomicx_1_1_message">Message</link>&amp;&#32;message)
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)&#32;pszKey;&#32;(void)&#32;nKeyLenght;&#32;(void)&#32;message;
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1579 
1588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a2407946fa015153b0a813d9ea7d15019">IsSubscribed</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pszKey,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nKeyLenght)
1589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)&#32;pszKey;&#32;(void)&#32;nKeyLenght;
1591 
1592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1594 
1600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1acfdf080727d53cbaf31cd6b8c6595e5b">SetStackIncreasePace</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;nIncreasePace);
1601 
1602 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1603 
1607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddThisThread();
1608 
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RemoveThisThread();
1613 
1623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint16_t&#32;crc16(<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;pData,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nSize,&#32;uint16_t&#32;nCRC);
1624 
1631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SelectNextThread(<emphasis role="keywordtype">void</emphasis>);
1632 
1637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx">atomicx</link>*&#32;m_paNext&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx">atomicx</link>*&#32;m_paPrev&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1639 
1640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jmp_buf&#32;m_context;
1641 
1642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_stackSize=0;
1643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_stacUsedkSize=0;
1644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;m_stackIncreasePace=1;
1645 
1646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Message&#32;m_lockMessage&#32;=&#32;{0,0};
1647 
1648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;m_nTargetTime=0;
1649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;m_nice=0;
1650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;m_LastUserExecTime=0;
1651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_atomicx_8hpp_1a920b9cf8bd44e31bfb1bfdf4cb1c9080">atomicx_time</link>&#32;m_lastResumeUserTime=0;
1652 
1653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;m_TopicId=0;
1654 
1655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1a82633f5364d51f3b5a8dfed1e93007ed">aTypes</link>&#32;&#32;m_aStatus&#32;=&#32;<link linkend="_classthread_1_1atomicx_1a82633f5364d51f3b5a8dfed1e93007edaea2b2676c28c0db26d39331a336c6b92">aTypes::start</link>;
1656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67f">aSubTypes</link>&#32;m_aSubStatus&#32;=&#32;<link linkend="_classthread_1_1atomicx_1ad539e1e9bbab631727153dea853aa67fa444bcb3a3fcf8389296c49467f27e1d6">aSubTypes::ok</link>;
1657 
1658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint8_t*&#32;m_stack;
1659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint8_t*&#32;m_pStaskStart=<emphasis role="keyword">nullptr</emphasis>;
1660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint8_t*&#32;m_pStaskEnd=<emphasis role="keyword">nullptr</emphasis>;
1661 
1662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t*&#32;m_pLockId=<emphasis role="keyword">nullptr</emphasis>;
1663 
1664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
1665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1abb1519b6cc2f9dbe3521f3cffd011f15">autoStack</link>&#32;:&#32;1;
1667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classthread_1_1atomicx_1a736d1417c7f474e02b2684eebfb96b78">dynamicNice</link>&#32;:&#32;1;
1668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;m_flags&#32;=&#32;{};
1669 &#32;&#32;&#32;&#32;};
1670 }
1671 
1672 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;atomicx_hpp&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
