.TH "thread::atomicx::smartMutex" 3 "Sun Jan 30 2022" "AtomicX" \" -*- nroff -*-
.ad l
.nh
.SH NAME
thread::atomicx::smartMutex \- RII compliance lock/shared lock to auto unlock on destruction\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <atomicx\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsmartMutex\fP ()=delete"
.br
.ti -1c
.RI "\fBsmartMutex\fP (\fBmutex\fP &lockObj)"
.br
.RI "Construct a new Smart Lock object based a existing lock\&. "
.ti -1c
.RI "\fB~smartMutex\fP ()"
.br
.RI "Destroy and release the smart lock taken\&. "
.ti -1c
.RI "bool \fBSharedLock\fP ()"
.br
.RI "Accquire a SharedLock\&. "
.ti -1c
.RI "bool \fBLock\fP ()"
.br
.RI "Accquire a exclusive Lock\&. "
.ti -1c
.RI "size_t \fBIsShared\fP ()"
.br
.RI "Check how many shared locks are accquired\&. "
.ti -1c
.RI "bool \fBIsLocked\fP ()"
.br
.RI "Check if a exclusive lock has been already accquired\&. "
.in -1c
.SH "Detailed Description"
.PP 
RII compliance lock/shared lock to auto unlock on destruction\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "thread::atomicx::smartMutex::smartMutex ()\fC [delete]\fP"

.SS "thread::atomicx::smartMutex::smartMutex (\fBmutex\fP & lockObj)"

.PP
Construct a new Smart Lock object based a existing lock\&. 
.PP
\fBParameters\fP
.RS 4
\fIlockObj\fP the existing lock object 
.RE
.PP

.SS "thread::atomicx::smartMutex::~smartMutex ()"

.PP
Destroy and release the smart lock taken\&. 
.SH "Member Function Documentation"
.PP 
.SS "bool thread::atomicx::smartMutex::IsLocked ()"

.PP
Check if a exclusive lock has been already accquired\&. 
.PP
\fBReturns\fP
.RS 4
true if yes, otherwise false 
.RE
.PP

.SS "size_t thread::atomicx::smartMutex::IsShared ()"

.PP
Check how many shared locks are accquired\&. 
.PP
\fBReturns\fP
.RS 4
size_t Number of threads holding shared locks 
.RE
.PP

.SS "bool thread::atomicx::smartMutex::Lock ()"

.PP
Accquire a exclusive Lock\&. 
.PP
\fBReturns\fP
.RS 4
true if accquired, false if another accquisition was already done 
.RE
.PP

.SS "bool thread::atomicx::smartMutex::SharedLock ()"

.PP
Accquire a SharedLock\&. 
.PP
\fBReturns\fP
.RS 4
true if accquired, false if another accquisition was already done 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for AtomicX from the source code\&.
